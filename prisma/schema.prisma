// Prisma Schema for PC Parts Aggregator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// PC Part Categories
enum PartCategory {
  CPU
  GPU
  MOTHERBOARD
  RAM
  STORAGE
  PSU
  CASE
  COOLING
  MONITOR
  PERIPHERAL
  ACCESSORY
  OTHER
}

// Retailer Sources
enum Retailer {
  DATABLITZ
  PCWORTH
  BERMOR
}

// Stock Status
enum StockStatus {
  IN_STOCK
  OUT_OF_STOCK
  LIMITED_STOCK
  UNKNOWN
}

// Main Product Model
model Product {
  id          String        @id @default(cuid())
  name        String
  category    PartCategory
  brand       String?
  model       String?
  description String?       @db.Text
  imageUrl    String?

  // Aggregated pricing
  lowestPrice Decimal?      @db.Decimal(10, 2)
  highestPrice Decimal?     @db.Decimal(10, 2)

  // Metadata
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  listings    ProductListing[]
  pcBuilds    PCBuildItem[]

  @@index([category])
  @@index([brand])
  @@index([lowestPrice])
  @@map("products")
}

// Individual Retailer Listings
model ProductListing {
  id          String       @id @default(cuid())
  productId   String
  product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade)

  retailer    Retailer
  retailerUrl String

  price       Decimal      @db.Decimal(10, 2)
  stockStatus StockStatus  @default(UNKNOWN)

  // Scraping metadata
  lastScraped DateTime     @default(now())
  isActive    Boolean      @default(true)

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([productId, retailer])
  @@index([retailer])
  @@index([price])
  @@index([lastScraped])
  @@map("product_listings")
}

// PC Build Configurations
model PCBuild {
  id          String        @id @default(cuid())
  name        String
  description String?       @db.Text

  totalPrice  Decimal       @default(0) @db.Decimal(10, 2)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  items       PCBuildItem[]

  @@map("pc_builds")
}

// Items in a PC Build
model PCBuildItem {
  id        String      @id @default(cuid())
  buildId   String
  build     PCBuild     @relation(fields: [buildId], references: [id], onDelete: Cascade)

  productId String
  product   Product     @relation(fields: [productId], references: [id])

  quantity  Int         @default(1)

  createdAt DateTime    @default(now())

  @@unique([buildId, productId])
  @@map("pc_build_items")
}

// Scraping Jobs Log
model ScrapeJob {
  id          String    @id @default(cuid())
  retailer    Retailer
  status      String    // "running", "completed", "failed"

  itemsScraped Int      @default(0)
  itemsUpdated Int      @default(0)
  itemsFailed  Int      @default(0)

  error       String?   @db.Text

  startedAt   DateTime  @default(now())
  completedAt DateTime?

  @@index([retailer])
  @@index([status])
  @@index([startedAt])
  @@map("scrape_jobs")
}
