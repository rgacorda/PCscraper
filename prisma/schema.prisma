// Prisma Schema for PC Parts Aggregator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// PC Part Categories
enum PartCategory {
  CPU
  CPU_COOLER
  GPU
  MOTHERBOARD
  RAM
  STORAGE
  PSU
  CASE
  CASE_FAN
  MONITOR
  PERIPHERAL
  ACCESSORY
  OTHER
}

// Retailer Sources
enum Retailer {
  DATABLITZ
  PCWORTH
  BERMOR
}

// Stock Status
enum StockStatus {
  IN_STOCK
  OUT_OF_STOCK
  LIMITED_STOCK
  UNKNOWN
}

// Main Product Model
model Product {
  id          String       @id @default(cuid())
  name        String
  category    PartCategory
  brand       String?
  model       String?
  description String?      @db.Text
  imageUrl    String?
  rating      Decimal?     @db.Decimal(3, 2)

  // Aggregated pricing
  lowestPrice  Decimal? @db.Decimal(10, 2)
  highestPrice Decimal? @db.Decimal(10, 2)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  listings   ProductListing[]
  pcBuilds   PCBuildItem[]
  buildItems BuildItem[]

  @@index([category])
  @@index([brand])
  @@index([lowestPrice])
  @@map("products")
}

// Individual Retailer Listings
model ProductListing {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  retailer    Retailer
  retailerUrl String

  price       Decimal     @db.Decimal(10, 2)
  stockStatus StockStatus @default(UNKNOWN)

  // Scraping metadata
  lastScraped DateTime @default(now())
  isActive    Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, retailer])
  @@index([retailer])
  @@index([price])
  @@index([lastScraped])
  @@map("product_listings")
}

// PC Build Configurations
model PCBuild {
  id          String  @id @default(cuid())
  name        String
  description String? @db.Text

  totalPrice Decimal @default(0) @db.Decimal(10, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items PCBuildItem[]

  @@map("pc_builds")
}

// Items in a PC Build
model PCBuildItem {
  id      String  @id @default(cuid())
  buildId String
  build   PCBuild @relation(fields: [buildId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  quantity Int @default(1)

  createdAt DateTime @default(now())

  @@unique([buildId, productId])
  @@map("pc_build_items")
}

// Scraping Jobs Log
model ScrapeJob {
  id       String   @id @default(cuid())
  retailer Retailer
  status   String // "running", "completed", "failed"

  itemsScraped Int @default(0)
  itemsUpdated Int @default(0)
  itemsFailed  Int @default(0)

  error String? @db.Text

  startedAt   DateTime  @default(now())
  completedAt DateTime?

  @@index([retailer])
  @@index([status])
  @@index([startedAt])
  @@map("scrape_jobs")
}

// Scraping Progress Tracking (for pagination resume)
model ScrapingState {
  id              String   @id @default(cuid())
  retailer        Retailer
  category        String // Category name (e.g., "CPU", "GPU") for Bermor/PCWorth, or empty for Datablitz
  currentPage     Int      @default(1)
  lastCompletedAt DateTime @default(now())
  isComplete      Boolean  @default(false) // true when all pages scraped

  updatedAt DateTime @updatedAt

  @@unique([retailer, category])
  @@index([retailer])
  @@map("scraping_state")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?

  accounts            Account[]
  sessions            Session[]
  builds              Build[]
  buildRatings        BuildRating[]
  buildComments       BuildComment[]
  buildFavorites      BuildFavorite[]
  passwordResetTokens PasswordResetToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("password_reset_tokens")
}

// Build Rating System
model BuildRating {
  id      String @id @default(cuid())
  buildId String
  userId  String
  rating  Int // 1-5 stars

  build Build @relation(fields: [buildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([buildId, userId])
  @@index([buildId])
  @@index([userId])
  @@map("build_ratings")
}

// Build Comment System
model BuildComment {
  id      String @id @default(cuid())
  buildId String
  userId  String
  content String @db.Text

  build Build @relation(fields: [buildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([buildId])
  @@index([userId])
  @@map("build_comments")
}

// Build Favorites System
model BuildFavorite {
  id      String @id @default(cuid())
  buildId String
  userId  String

  build Build @relation(fields: [buildId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([buildId, userId])
  @@index([buildId])
  @@index([userId])
  @@map("build_favorites")
}

// Enhanced Build Model
model Build {
  id          String  @id @default(cuid())
  name        String
  description String? @db.Text
  isPublic    Boolean @default(false)
  userId      String?

  totalPrice Decimal @default(0) @db.Decimal(10, 2)

  user      User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  items     BuildItem[]
  ratings   BuildRating[]
  comments  BuildComment[]
  favorites BuildFavorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([isPublic])
  @@map("builds")
}

// Enhanced Build Items
model BuildItem {
  id        String @id @default(cuid())
  buildId   String
  productId String
  quantity  Int    @default(1)

  build   Build   @relation(fields: [buildId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())

  @@unique([buildId, productId])
  @@map("build_items")
}
